syntax = "proto3";

option go_package = "./";

package gozab;

// the service follower provide to leader
service FollowerLeader {
    rpc Broadcast (PropTxn) returns (AckTxn) {}
    rpc Commit (CommitTxn) returns (Empty) {}
    rpc HeartBeat (Empty) returns (Empty) {}
}

// the service leader provide to user
service LeaderUser {
    rpc Store (Vec) returns (Empty) {}
    rpc Retrieve (GetTxn) returns (ResultTxn) {}
}

// the service during election
service VoterCandidate {
    rpc AskVote (Epoch) returns (Vote) {}
    rpc NewEpoch (Epoch) returns (EpochHist) {}
    rpc NewLeader (EpochHist) returns (Vote) {}
    rpc CommitNewLeader (Epoch) returns (Empty) {}
}

// used as ACK_E and parameters of NEWLEADER()
message EpochHist {
    int32 Epoch = 1;
    repeated PropTxn hist = 2;
}

message Epoch {
    int32 epoch = 1;
}

message Vote {
    bool voted = 1;
}

message Vec {
    string key = 1;
    int32 value = 2;
}

message Zxid {
    int32 epoch = 1;
    int32 counter = 2;
}

message Txn {
    Vec v = 1;
    Zxid z = 2;
}

message PropTxn {
    int32 e = 1;
    Txn transaction = 2;
}

message AckTxn {
    string content = 1;
}

message CommitTxn {
    string content = 1;
    int32 epoch = 2;
}

message GetTxn {
    string key = 1;
}

message ResultTxn {
    int32 value = 1;
}

message Empty {
    string content = 1;
}