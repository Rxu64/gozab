// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: gozab.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimulationClient is the client API for Simulation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulationClient interface {
	Broadcast(ctx context.Context, in *PropTxn, opts ...grpc.CallOption) (*AckTxn, error)
	Commit(ctx context.Context, in *CommitTxn, opts ...grpc.CallOption) (*Empty, error)
	Retrieve(ctx context.Context, in *GetTxn, opts ...grpc.CallOption) (*ResultTxn, error)
}

type simulationClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulationClient(cc grpc.ClientConnInterface) SimulationClient {
	return &simulationClient{cc}
}

func (c *simulationClient) Broadcast(ctx context.Context, in *PropTxn, opts ...grpc.CallOption) (*AckTxn, error) {
	out := new(AckTxn)
	err := c.cc.Invoke(ctx, "/gozab.Simulation/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) Commit(ctx context.Context, in *CommitTxn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gozab.Simulation/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) Retrieve(ctx context.Context, in *GetTxn, opts ...grpc.CallOption) (*ResultTxn, error) {
	out := new(ResultTxn)
	err := c.cc.Invoke(ctx, "/gozab.Simulation/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulationServer is the server API for Simulation service.
// All implementations must embed UnimplementedSimulationServer
// for forward compatibility
type SimulationServer interface {
	Broadcast(context.Context, *PropTxn) (*AckTxn, error)
	Commit(context.Context, *CommitTxn) (*Empty, error)
	Retrieve(context.Context, *GetTxn) (*ResultTxn, error)
	mustEmbedUnimplementedSimulationServer()
}

// UnimplementedSimulationServer must be embedded to have forward compatible implementations.
type UnimplementedSimulationServer struct {
}

func (UnimplementedSimulationServer) Broadcast(context.Context, *PropTxn) (*AckTxn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedSimulationServer) Commit(context.Context, *CommitTxn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedSimulationServer) Retrieve(context.Context, *GetTxn) (*ResultTxn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedSimulationServer) mustEmbedUnimplementedSimulationServer() {}

// UnsafeSimulationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulationServer will
// result in compilation errors.
type UnsafeSimulationServer interface {
	mustEmbedUnimplementedSimulationServer()
}

func RegisterSimulationServer(s grpc.ServiceRegistrar, srv SimulationServer) {
	s.RegisterService(&Simulation_ServiceDesc, srv)
}

func _Simulation_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gozab.Simulation/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).Broadcast(ctx, req.(*PropTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gozab.Simulation/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).Commit(ctx, req.(*CommitTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gozab.Simulation/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).Retrieve(ctx, req.(*GetTxn))
	}
	return interceptor(ctx, in, info, handler)
}

// Simulation_ServiceDesc is the grpc.ServiceDesc for Simulation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simulation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gozab.Simulation",
	HandlerType: (*SimulationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _Simulation_Broadcast_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Simulation_Commit_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Simulation_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gozab.proto",
}

// ClientConsoleClient is the client API for ClientConsole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientConsoleClient interface {
	SendRequest(ctx context.Context, in *Vec, opts ...grpc.CallOption) (*Empty, error)
	Retrieve(ctx context.Context, in *GetTxn, opts ...grpc.CallOption) (*ResultTxn, error)
}

type clientConsoleClient struct {
	cc grpc.ClientConnInterface
}

func NewClientConsoleClient(cc grpc.ClientConnInterface) ClientConsoleClient {
	return &clientConsoleClient{cc}
}

func (c *clientConsoleClient) SendRequest(ctx context.Context, in *Vec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gozab.ClientConsole/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientConsoleClient) Retrieve(ctx context.Context, in *GetTxn, opts ...grpc.CallOption) (*ResultTxn, error) {
	out := new(ResultTxn)
	err := c.cc.Invoke(ctx, "/gozab.ClientConsole/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientConsoleServer is the server API for ClientConsole service.
// All implementations must embed UnimplementedClientConsoleServer
// for forward compatibility
type ClientConsoleServer interface {
	SendRequest(context.Context, *Vec) (*Empty, error)
	Retrieve(context.Context, *GetTxn) (*ResultTxn, error)
	mustEmbedUnimplementedClientConsoleServer()
}

// UnimplementedClientConsoleServer must be embedded to have forward compatible implementations.
type UnimplementedClientConsoleServer struct {
}

func (UnimplementedClientConsoleServer) SendRequest(context.Context, *Vec) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedClientConsoleServer) Retrieve(context.Context, *GetTxn) (*ResultTxn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedClientConsoleServer) mustEmbedUnimplementedClientConsoleServer() {}

// UnsafeClientConsoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientConsoleServer will
// result in compilation errors.
type UnsafeClientConsoleServer interface {
	mustEmbedUnimplementedClientConsoleServer()
}

func RegisterClientConsoleServer(s grpc.ServiceRegistrar, srv ClientConsoleServer) {
	s.RegisterService(&ClientConsole_ServiceDesc, srv)
}

func _ClientConsole_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientConsoleServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gozab.ClientConsole/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientConsoleServer).SendRequest(ctx, req.(*Vec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientConsole_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientConsoleServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gozab.ClientConsole/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientConsoleServer).Retrieve(ctx, req.(*GetTxn))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientConsole_ServiceDesc is the grpc.ServiceDesc for ClientConsole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientConsole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gozab.ClientConsole",
	HandlerType: (*ClientConsoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequest",
			Handler:    _ClientConsole_SendRequest_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ClientConsole_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gozab.proto",
}
